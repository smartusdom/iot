version: '3.7'
services:

  socks5:
    image: serjs/go-socks5-proxy
    container_name: socks5
    restart: always
    env_file:
      - .env
    ports:
      - 1080:1080
    networks:
      - backend

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./conf/nginx:/etc/nginx/conf.d
      - ./conf/certbot:/etc/letsencrypt
      - ./conf/nginx/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    networks:
      - backend
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - certbot

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./conf/certbot:/etc/letsencrypt
      - ./conf/nginx/www:/var/www/certbot
    networks:
      - backend
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; chmod 644 /etc/letsencrypt/archive/smartusdom.ru/*.pem; sleep 12h & wait $${!}; done;'"
    depends_on:
      - influx
      
  influx:
    image: influxdb:1.8-alpine
    container_name: influx
    restart: always
    env_file:
      - .env
    networks:
      - backend
    ports:
      - 8086:8086
    volumes:
      - ./data/influx:/var/lib/influxdb
    depends_on:
      - telegraf

  telegraf:
    image: telegraf:alpine
    container_name: telegraf
    restart: always
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    networks:
      - backend
    ports:
      - "55559:55559/udp"
    volumes:
      - ./conf/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro

  grafana:
    image:  grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    restart: always
    links:
      - influx:influx
    user: "0"
    networks:
      - backend
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_COOKIE_SECURE="true"
      - GF_SERVER_DOMAIN=smartusdom.ru
      - GF_SERVER_ROOT_URL=https://smartusdom.ru/manager/grafana/
      - GF_DEFAULT_INSTANCE_NAME=smartusdom
    depends_on:
      - influx

  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    environment:
      - VIRTUAL_HOST=broker
    ports:
      - 127.0.0.1:8000:8000
      - 127.0.0.1:9000:9000
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data

  prometheus:
    image: prom/prometheus:v2.33.4
    container_name: prometheus
    networks:
      - backend
    ports:
      - 127.0.0.1:9090:9090
    restart: always
    volumes:
      - ./data/prometheus:/prometheus
      - ./conf/prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.route-prefix=/manager/prometheus
      - --web.external-url=https://smartusdom.ru/manager/prometheus
    depends_on:
      - node-exporter

  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: node-exporter
    restart: always
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - 9100:9100
    networks:
      - backend
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    depends_on:
      - influx

      
# https://github.com/kylemanna/docker-openvpn/blob/master/docs/docker-compose.md
# docker-compose run --rm openvpn ovpn_genconfig -u udp://VPN.SERVERNAME.COM
# docker-compose run --rm openvpn ovpn_initpki      

  openvpn:
    cap_add:
     - NET_ADMIN
    image: kylemanna/openvpn
    container_name: openvpn
    ports:
     - "1194:1194/udp"
    restart: always
    volumes:
     - ./data/openvpn:/etc/openvpn
  
networks:
  backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.16.0/24